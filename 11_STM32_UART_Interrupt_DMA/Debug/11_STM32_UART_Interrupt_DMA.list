
11_STM32_UART_Interrupt_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003438  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080035d0  080035d0  000045d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035f0  080035f0  00005014  2**0
                  CONTENTS
  4 .ARM          00000008  080035f0  080035f0  000045f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035f8  080035f8  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035f8  080035f8  000045f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035fc  080035fc  000045fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003600  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000014  08003614  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08003614  000051a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000821a  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001697  00000000  00000000  0000d25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0000e8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000534  00000000  00000000  0000efc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000149e1  00000000  00000000  0000f4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000882f  00000000  00000000  00023edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f99  00000000  00000000  0002c70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae6a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001adc  00000000  00000000  000ae6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000b01c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080035b8 	.word	0x080035b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	080035b8 	.word	0x080035b8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_UARTEx_RxEventCallback>:

uint8_t tx_data[5] = {1,2,3,4,5};
uint8_t rx_data[100];

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_data, 100);
 80004d4:	2264      	movs	r2, #100	@ 0x64
 80004d6:	4904      	ldr	r1, [pc, #16]	@ (80004e8 <HAL_UARTEx_RxEventCallback+0x20>)
 80004d8:	4804      	ldr	r0, [pc, #16]	@ (80004ec <HAL_UARTEx_RxEventCallback+0x24>)
 80004da:	f001 fef1 	bl	80022c0 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000138 	.word	0x20000138
 80004ec:	20000030 	.word	0x20000030

080004f0 <main>:

int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

  HAL_Init();
 80004f4:	f000 fa5e 	bl	80009b4 <HAL_Init>

  SystemClock_Config();
 80004f8:	f000 f81c 	bl	8000534 <SystemClock_Config>

  MX_GPIO_Init();
 80004fc:	f000 f8d4 	bl	80006a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000500:	f000 f8aa 	bl	8000658 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000504:	f000 f87e 	bl	8000604 <MX_USART2_UART_Init>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_data, 100);
 8000508:	2264      	movs	r2, #100	@ 0x64
 800050a:	4907      	ldr	r1, [pc, #28]	@ (8000528 <main+0x38>)
 800050c:	4807      	ldr	r0, [pc, #28]	@ (800052c <main+0x3c>)
 800050e:	f001 fed7 	bl	80022c0 <HAL_UARTEx_ReceiveToIdle_DMA>

  while (1)
  {
	  HAL_UART_Transmit_DMA(&huart2, tx_data, 5);
 8000512:	2205      	movs	r2, #5
 8000514:	4906      	ldr	r1, [pc, #24]	@ (8000530 <main+0x40>)
 8000516:	4805      	ldr	r0, [pc, #20]	@ (800052c <main+0x3c>)
 8000518:	f001 fe62 	bl	80021e0 <HAL_UART_Transmit_DMA>
	  HAL_Delay(1000);
 800051c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000520:	f000 faba 	bl	8000a98 <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart2, tx_data, 5);
 8000524:	bf00      	nop
 8000526:	e7f4      	b.n	8000512 <main+0x22>
 8000528:	20000138 	.word	0x20000138
 800052c:	20000030 	.word	0x20000030
 8000530:	20000000 	.word	0x20000000

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	@ 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	@ 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f003 f80c 	bl	8003560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b27      	ldr	r3, [pc, #156]	@ (80005fc <SystemClock_Config+0xc8>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	4a26      	ldr	r2, [pc, #152]	@ (80005fc <SystemClock_Config+0xc8>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	@ 0x40
 8000568:	4b24      	ldr	r3, [pc, #144]	@ (80005fc <SystemClock_Config+0xc8>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b21      	ldr	r3, [pc, #132]	@ (8000600 <SystemClock_Config+0xcc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a20      	ldr	r2, [pc, #128]	@ (8000600 <SystemClock_Config+0xcc>)
 800057e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1e      	ldr	r3, [pc, #120]	@ (8000600 <SystemClock_Config+0xcc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2310      	movs	r3, #16
 800059a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a0:	2300      	movs	r3, #0
 80005a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a4:	2308      	movs	r3, #8
 80005a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80005a8:	2340      	movs	r3, #64	@ 0x40
 80005aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 f929 	bl	8001810 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c4:	f000 f88a 	bl	80006dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2302      	movs	r3, #2
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80005d0:	2390      	movs	r3, #144	@ 0x90
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 fb8b 	bl	8001d00 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f0:	f000 f874 	bl	80006dc <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	@ 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000608:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 800060a:	4a12      	ldr	r2, [pc, #72]	@ (8000654 <MX_USART2_UART_Init+0x50>)
 800060c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800060e:	4b10      	ldr	r3, [pc, #64]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 8000610:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000614:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000628:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 800062a:	220c      	movs	r2, #12
 800062c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062e:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000634:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 800063c:	f001 fd80 	bl	8002140 <HAL_UART_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000646:	f000 f849 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000030 	.word	0x20000030
 8000654:	40004400 	.word	0x40004400

08000658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <MX_DMA_Init+0x4c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a0f      	ldr	r2, [pc, #60]	@ (80006a4 <MX_DMA_Init+0x4c>)
 8000668:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b0d      	ldr	r3, [pc, #52]	@ (80006a4 <MX_DMA_Init+0x4c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2010      	movs	r0, #16
 8000680:	f000 fb09 	bl	8000c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000684:	2010      	movs	r0, #16
 8000686:	f000 fb22 	bl	8000cce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	2011      	movs	r0, #17
 8000690:	f000 fb01 	bl	8000c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000694:	2011      	movs	r0, #17
 8000696:	f000 fb1a 	bl	8000cce <HAL_NVIC_EnableIRQ>

}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <MX_GPIO_Init+0x30>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4a08      	ldr	r2, [pc, #32]	@ (80006d8 <MX_GPIO_Init+0x30>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <MX_GPIO_Init+0x30>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <Error_Handler+0x8>

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <HAL_MspInit+0x4c>)
 80006f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000734 <HAL_MspInit+0x4c>)
 80006f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80006fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <HAL_MspInit+0x4c>)
 8000700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <HAL_MspInit+0x4c>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000712:	4a08      	ldr	r2, [pc, #32]	@ (8000734 <HAL_MspInit+0x4c>)
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000718:	6413      	str	r3, [r2, #64]	@ 0x40
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <HAL_MspInit+0x4c>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000726:	2007      	movs	r0, #7
 8000728:	f000 faaa 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800

08000738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	@ 0x28
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a4b      	ldr	r2, [pc, #300]	@ (8000884 <HAL_UART_MspInit+0x14c>)
 8000756:	4293      	cmp	r3, r2
 8000758:	f040 8090 	bne.w	800087c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	4b49      	ldr	r3, [pc, #292]	@ (8000888 <HAL_UART_MspInit+0x150>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	4a48      	ldr	r2, [pc, #288]	@ (8000888 <HAL_UART_MspInit+0x150>)
 8000766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800076a:	6413      	str	r3, [r2, #64]	@ 0x40
 800076c:	4b46      	ldr	r3, [pc, #280]	@ (8000888 <HAL_UART_MspInit+0x150>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	4b42      	ldr	r3, [pc, #264]	@ (8000888 <HAL_UART_MspInit+0x150>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000780:	4a41      	ldr	r2, [pc, #260]	@ (8000888 <HAL_UART_MspInit+0x150>)
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	6313      	str	r3, [r2, #48]	@ 0x30
 8000788:	4b3f      	ldr	r3, [pc, #252]	@ (8000888 <HAL_UART_MspInit+0x150>)
 800078a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000794:	230c      	movs	r3, #12
 8000796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	2302      	movs	r3, #2
 800079a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a0:	2303      	movs	r3, #3
 80007a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007a4:	2307      	movs	r3, #7
 80007a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	4837      	ldr	r0, [pc, #220]	@ (800088c <HAL_UART_MspInit+0x154>)
 80007b0:	f000 feaa 	bl	8001508 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80007b4:	4b36      	ldr	r3, [pc, #216]	@ (8000890 <HAL_UART_MspInit+0x158>)
 80007b6:	4a37      	ldr	r2, [pc, #220]	@ (8000894 <HAL_UART_MspInit+0x15c>)
 80007b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80007ba:	4b35      	ldr	r3, [pc, #212]	@ (8000890 <HAL_UART_MspInit+0x158>)
 80007bc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80007c0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <HAL_UART_MspInit+0x158>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c8:	4b31      	ldr	r3, [pc, #196]	@ (8000890 <HAL_UART_MspInit+0x158>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007ce:	4b30      	ldr	r3, [pc, #192]	@ (8000890 <HAL_UART_MspInit+0x158>)
 80007d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007d4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000890 <HAL_UART_MspInit+0x158>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000890 <HAL_UART_MspInit+0x158>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80007e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <HAL_UART_MspInit+0x158>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007e8:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <HAL_UART_MspInit+0x158>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007ee:	4b28      	ldr	r3, [pc, #160]	@ (8000890 <HAL_UART_MspInit+0x158>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80007f4:	4826      	ldr	r0, [pc, #152]	@ (8000890 <HAL_UART_MspInit+0x158>)
 80007f6:	f000 fa85 	bl	8000d04 <HAL_DMA_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000800:	f7ff ff6c 	bl	80006dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a22      	ldr	r2, [pc, #136]	@ (8000890 <HAL_UART_MspInit+0x158>)
 8000808:	63da      	str	r2, [r3, #60]	@ 0x3c
 800080a:	4a21      	ldr	r2, [pc, #132]	@ (8000890 <HAL_UART_MspInit+0x158>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000810:	4b21      	ldr	r3, [pc, #132]	@ (8000898 <HAL_UART_MspInit+0x160>)
 8000812:	4a22      	ldr	r2, [pc, #136]	@ (800089c <HAL_UART_MspInit+0x164>)
 8000814:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000816:	4b20      	ldr	r3, [pc, #128]	@ (8000898 <HAL_UART_MspInit+0x160>)
 8000818:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800081c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800081e:	4b1e      	ldr	r3, [pc, #120]	@ (8000898 <HAL_UART_MspInit+0x160>)
 8000820:	2240      	movs	r2, #64	@ 0x40
 8000822:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000824:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <HAL_UART_MspInit+0x160>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800082a:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <HAL_UART_MspInit+0x160>)
 800082c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000830:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000832:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <HAL_UART_MspInit+0x160>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000838:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <HAL_UART_MspInit+0x160>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800083e:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <HAL_UART_MspInit+0x160>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <HAL_UART_MspInit+0x160>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800084a:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <HAL_UART_MspInit+0x160>)
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000850:	4811      	ldr	r0, [pc, #68]	@ (8000898 <HAL_UART_MspInit+0x160>)
 8000852:	f000 fa57 	bl	8000d04 <HAL_DMA_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800085c:	f7ff ff3e 	bl	80006dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a0d      	ldr	r2, [pc, #52]	@ (8000898 <HAL_UART_MspInit+0x160>)
 8000864:	639a      	str	r2, [r3, #56]	@ 0x38
 8000866:	4a0c      	ldr	r2, [pc, #48]	@ (8000898 <HAL_UART_MspInit+0x160>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	2026      	movs	r0, #38	@ 0x26
 8000872:	f000 fa10 	bl	8000c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000876:	2026      	movs	r0, #38	@ 0x26
 8000878:	f000 fa29 	bl	8000cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	@ 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40004400 	.word	0x40004400
 8000888:	40023800 	.word	0x40023800
 800088c:	40020000 	.word	0x40020000
 8000890:	20000078 	.word	0x20000078
 8000894:	40026088 	.word	0x40026088
 8000898:	200000d8 	.word	0x200000d8
 800089c:	400260a0 	.word	0x400260a0

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <NMI_Handler+0x4>

080008a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <MemManage_Handler+0x4>

080008b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f6:	f000 f8af 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000904:	4802      	ldr	r0, [pc, #8]	@ (8000910 <DMA1_Stream5_IRQHandler+0x10>)
 8000906:	f000 fb95 	bl	8001034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000078 	.word	0x20000078

08000914 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000918:	4802      	ldr	r0, [pc, #8]	@ (8000924 <DMA1_Stream6_IRQHandler+0x10>)
 800091a:	f000 fb8b 	bl	8001034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200000d8 	.word	0x200000d8

08000928 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800092c:	4802      	ldr	r0, [pc, #8]	@ (8000938 <USART2_IRQHandler+0x10>)
 800092e:	f001 fd25 	bl	800237c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000030 	.word	0x20000030

0800093c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <SystemInit+0x20>)
 8000942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000946:	4a05      	ldr	r2, [pc, #20]	@ (800095c <SystemInit+0x20>)
 8000948:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800094c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000960:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000998 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000964:	f7ff ffea 	bl	800093c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000968:	480c      	ldr	r0, [pc, #48]	@ (800099c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800096a:	490d      	ldr	r1, [pc, #52]	@ (80009a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800096c:	4a0d      	ldr	r2, [pc, #52]	@ (80009a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000980:	4c0a      	ldr	r4, [pc, #40]	@ (80009ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800098e:	f002 fdef 	bl	8003570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000992:	f7ff fdad 	bl	80004f0 <main>
  bx  lr    
 8000996:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000998:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80009a4:	08003600 	.word	0x08003600
  ldr r2, =_sbss
 80009a8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80009ac:	200001a0 	.word	0x200001a0

080009b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC_IRQHandler>
	...

080009b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b8:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0d      	ldr	r2, [pc, #52]	@ (80009f4 <HAL_Init+0x40>)
 80009be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c4:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <HAL_Init+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <HAL_Init+0x40>)
 80009ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <HAL_Init+0x40>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a07      	ldr	r2, [pc, #28]	@ (80009f4 <HAL_Init+0x40>)
 80009d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f94f 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 f808 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e8:	f7ff fe7e 	bl	80006e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023c00 	.word	0x40023c00

080009f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <HAL_InitTick+0x54>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <HAL_InitTick+0x58>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f967 	bl	8000cea <HAL_SYSTICK_Config>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00e      	b.n	8000a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d80a      	bhi.n	8000a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f000 f92f 	bl	8000c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	4a06      	ldr	r2, [pc, #24]	@ (8000a54 <HAL_InitTick+0x5c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000010 	.word	0x20000010
 8000a54:	2000000c 	.word	0x2000000c

08000a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_IncTick+0x20>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <HAL_IncTick+0x24>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a04      	ldr	r2, [pc, #16]	@ (8000a7c <HAL_IncTick+0x24>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000010 	.word	0x20000010
 8000a7c:	2000019c 	.word	0x2000019c

08000a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b03      	ldr	r3, [pc, #12]	@ (8000a94 <HAL_GetTick+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	2000019c 	.word	0x2000019c

08000a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa0:	f7ff ffee 	bl	8000a80 <HAL_GetTick>
 8000aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab0:	d005      	beq.n	8000abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8000adc <HAL_Delay+0x44>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4413      	add	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000abe:	bf00      	nop
 8000ac0:	f7ff ffde 	bl	8000a80 <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d8f7      	bhi.n	8000ac0 <HAL_Delay+0x28>
  {
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000010 	.word	0x20000010

08000ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	@ (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	db0b      	blt.n	8000b6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	f003 021f 	and.w	r2, r3, #31
 8000b5c:	4907      	ldr	r1, [pc, #28]	@ (8000b7c <__NVIC_EnableIRQ+0x38>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	095b      	lsrs	r3, r3, #5
 8000b64:	2001      	movs	r0, #1
 8000b66:	fa00 f202 	lsl.w	r2, r0, r2
 8000b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	@ (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	@ (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	@ 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	@ 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c4c:	d301      	bcc.n	8000c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00f      	b.n	8000c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <SysTick_Config+0x40>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f7ff ff8e 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <SysTick_Config+0x40>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <SysTick_Config+0x40>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff29 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca8:	f7ff ff3e 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	6978      	ldr	r0, [r7, #20]
 8000cb4:	f7ff ff8e 	bl	8000bd4 <NVIC_EncodePriority>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff5d 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff31 	bl	8000b44 <__NVIC_EnableIRQ>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffa2 	bl	8000c3c <SysTick_Config>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff feb6 	bl	8000a80 <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e099      	b.n	8000e54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2202      	movs	r2, #2
 8000d24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 0201 	bic.w	r2, r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d40:	e00f      	b.n	8000d62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d42:	f7ff fe9d 	bl	8000a80 <HAL_GetTick>
 8000d46:	4602      	mov	r2, r0
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	2b05      	cmp	r3, #5
 8000d4e:	d908      	bls.n	8000d62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2220      	movs	r2, #32
 8000d54:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2203      	movs	r2, #3
 8000d5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e078      	b.n	8000e54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1e8      	bne.n	8000d42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	4b38      	ldr	r3, [pc, #224]	@ (8000e5c <HAL_DMA_Init+0x158>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d107      	bne.n	8000dcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f023 0307 	bic.w	r3, r3, #7
 8000de2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d117      	bne.n	8000e26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00e      	beq.n	8000e26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 fb01 	bl	8001410 <DMA_CheckFifoParam>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d008      	beq.n	8000e26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2240      	movs	r2, #64	@ 0x40
 8000e18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8000e22:	2301      	movs	r3, #1
 8000e24:	e016      	b.n	8000e54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 fab8 	bl	80013a4 <DMA_CalcBaseAndBitshift>
 8000e34:	4603      	mov	r3, r0
 8000e36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e3c:	223f      	movs	r2, #63	@ 0x3f
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	f010803f 	.word	0xf010803f

08000e60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d101      	bne.n	8000e86 <HAL_DMA_Start_IT+0x26>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e040      	b.n	8000f08 <HAL_DMA_Start_IT+0xa8>
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d12f      	bne.n	8000efa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	f000 fa4a 	bl	8001348 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000eb8:	223f      	movs	r2, #63	@ 0x3f
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0216 	orr.w	r2, r2, #22
 8000ece:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d007      	beq.n	8000ee8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f042 0208 	orr.w	r2, r2, #8
 8000ee6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f042 0201 	orr.w	r2, r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	e005      	b.n	8000f06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f02:	2302      	movs	r3, #2
 8000f04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f1e:	f7ff fdaf 	bl	8000a80 <HAL_GetTick>
 8000f22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d008      	beq.n	8000f42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2280      	movs	r2, #128	@ 0x80
 8000f34:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e052      	b.n	8000fe8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0216 	bic.w	r2, r2, #22
 8000f50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	695a      	ldr	r2, [r3, #20]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d103      	bne.n	8000f72 <HAL_DMA_Abort+0x62>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0208 	bic.w	r2, r2, #8
 8000f80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0201 	bic.w	r2, r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f92:	e013      	b.n	8000fbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f94:	f7ff fd74 	bl	8000a80 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b05      	cmp	r3, #5
 8000fa0:	d90c      	bls.n	8000fbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2203      	movs	r2, #3
 8000fac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e015      	b.n	8000fe8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1e4      	bne.n	8000f94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fce:	223f      	movs	r2, #63	@ 0x3f
 8000fd0:	409a      	lsls	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d004      	beq.n	800100e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2280      	movs	r2, #128	@ 0x80
 8001008:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00c      	b.n	8001028 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2205      	movs	r2, #5
 8001012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0201 	bic.w	r2, r2, #1
 8001024:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001040:	4b8e      	ldr	r3, [pc, #568]	@ (800127c <HAL_DMA_IRQHandler+0x248>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a8e      	ldr	r2, [pc, #568]	@ (8001280 <HAL_DMA_IRQHandler+0x24c>)
 8001046:	fba2 2303 	umull	r2, r3, r2, r3
 800104a:	0a9b      	lsrs	r3, r3, #10
 800104c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001052:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800105e:	2208      	movs	r2, #8
 8001060:	409a      	lsls	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4013      	ands	r3, r2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d01a      	beq.n	80010a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	2b00      	cmp	r3, #0
 8001076:	d013      	beq.n	80010a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0204 	bic.w	r2, r2, #4
 8001086:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800108c:	2208      	movs	r2, #8
 800108e:	409a      	lsls	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001098:	f043 0201 	orr.w	r2, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010a4:	2201      	movs	r2, #1
 80010a6:	409a      	lsls	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4013      	ands	r3, r2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d012      	beq.n	80010d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00b      	beq.n	80010d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010c2:	2201      	movs	r2, #1
 80010c4:	409a      	lsls	r2, r3
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010ce:	f043 0202 	orr.w	r2, r3, #2
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010da:	2204      	movs	r2, #4
 80010dc:	409a      	lsls	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d012      	beq.n	800110c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010f8:	2204      	movs	r2, #4
 80010fa:	409a      	lsls	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001104:	f043 0204 	orr.w	r2, r3, #4
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001110:	2210      	movs	r2, #16
 8001112:	409a      	lsls	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4013      	ands	r3, r2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d043      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d03c      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800112e:	2210      	movs	r2, #16
 8001130:	409a      	lsls	r2, r3
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d018      	beq.n	8001176 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d108      	bne.n	8001164 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	2b00      	cmp	r3, #0
 8001158:	d024      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	4798      	blx	r3
 8001162:	e01f      	b.n	80011a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001168:	2b00      	cmp	r3, #0
 800116a:	d01b      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	4798      	blx	r3
 8001174:	e016      	b.n	80011a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001180:	2b00      	cmp	r3, #0
 8001182:	d107      	bne.n	8001194 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0208 	bic.w	r2, r2, #8
 8001192:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011a8:	2220      	movs	r2, #32
 80011aa:	409a      	lsls	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 808f 	beq.w	80012d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 8087 	beq.w	80012d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ca:	2220      	movs	r2, #32
 80011cc:	409a      	lsls	r2, r3
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b05      	cmp	r3, #5
 80011dc:	d136      	bne.n	800124c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0216 	bic.w	r2, r2, #22
 80011ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	695a      	ldr	r2, [r3, #20]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	2b00      	cmp	r3, #0
 8001204:	d103      	bne.n	800120e <HAL_DMA_IRQHandler+0x1da>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800120a:	2b00      	cmp	r3, #0
 800120c:	d007      	beq.n	800121e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0208 	bic.w	r2, r2, #8
 800121c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001222:	223f      	movs	r2, #63	@ 0x3f
 8001224:	409a      	lsls	r2, r3
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800123e:	2b00      	cmp	r3, #0
 8001240:	d07e      	beq.n	8001340 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	4798      	blx	r3
        }
        return;
 800124a:	e079      	b.n	8001340 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d01d      	beq.n	8001296 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10d      	bne.n	8001284 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126c:	2b00      	cmp	r3, #0
 800126e:	d031      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	4798      	blx	r3
 8001278:	e02c      	b.n	80012d4 <HAL_DMA_IRQHandler+0x2a0>
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008
 8001280:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001288:	2b00      	cmp	r3, #0
 800128a:	d023      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	4798      	blx	r3
 8001294:	e01e      	b.n	80012d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d10f      	bne.n	80012c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0210 	bic.w	r2, r2, #16
 80012b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d032      	beq.n	8001342 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d022      	beq.n	800132e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2205      	movs	r2, #5
 80012ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0201 	bic.w	r2, r2, #1
 80012fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	3301      	adds	r3, #1
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	429a      	cmp	r2, r3
 800130a:	d307      	bcc.n	800131c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f2      	bne.n	8001300 <HAL_DMA_IRQHandler+0x2cc>
 800131a:	e000      	b.n	800131e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800131c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	2b00      	cmp	r3, #0
 8001334:	d005      	beq.n	8001342 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	4798      	blx	r3
 800133e:	e000      	b.n	8001342 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001340:	bf00      	nop
    }
  }
}
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001364:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b40      	cmp	r3, #64	@ 0x40
 8001374:	d108      	bne.n	8001388 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001386:	e007      	b.n	8001398 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	60da      	str	r2, [r3, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	3b10      	subs	r3, #16
 80013b4:	4a14      	ldr	r2, [pc, #80]	@ (8001408 <DMA_CalcBaseAndBitshift+0x64>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013be:	4a13      	ldr	r2, [pc, #76]	@ (800140c <DMA_CalcBaseAndBitshift+0x68>)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d909      	bls.n	80013e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80013da:	f023 0303 	bic.w	r3, r3, #3
 80013de:	1d1a      	adds	r2, r3, #4
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80013e4:	e007      	b.n	80013f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80013ee:	f023 0303 	bic.w	r3, r3, #3
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	aaaaaaab 	.word	0xaaaaaaab
 800140c:	080035e8 	.word	0x080035e8

08001410 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001420:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d11f      	bne.n	800146a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	2b03      	cmp	r3, #3
 800142e:	d856      	bhi.n	80014de <DMA_CheckFifoParam+0xce>
 8001430:	a201      	add	r2, pc, #4	@ (adr r2, 8001438 <DMA_CheckFifoParam+0x28>)
 8001432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001436:	bf00      	nop
 8001438:	08001449 	.word	0x08001449
 800143c:	0800145b 	.word	0x0800145b
 8001440:	08001449 	.word	0x08001449
 8001444:	080014df 	.word	0x080014df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d046      	beq.n	80014e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001458:	e043      	b.n	80014e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800145e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001462:	d140      	bne.n	80014e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001468:	e03d      	b.n	80014e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001472:	d121      	bne.n	80014b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d837      	bhi.n	80014ea <DMA_CheckFifoParam+0xda>
 800147a:	a201      	add	r2, pc, #4	@ (adr r2, 8001480 <DMA_CheckFifoParam+0x70>)
 800147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001480:	08001491 	.word	0x08001491
 8001484:	08001497 	.word	0x08001497
 8001488:	08001491 	.word	0x08001491
 800148c:	080014a9 	.word	0x080014a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
      break;
 8001494:	e030      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d025      	beq.n	80014ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014a6:	e022      	b.n	80014ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80014b0:	d11f      	bne.n	80014f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80014b6:	e01c      	b.n	80014f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d903      	bls.n	80014c6 <DMA_CheckFifoParam+0xb6>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d003      	beq.n	80014cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80014c4:	e018      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
      break;
 80014ca:	e015      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00e      	beq.n	80014f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
      break;
 80014dc:	e00b      	b.n	80014f6 <DMA_CheckFifoParam+0xe6>
      break;
 80014de:	bf00      	nop
 80014e0:	e00a      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      break;
 80014e2:	bf00      	nop
 80014e4:	e008      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      break;
 80014e6:	bf00      	nop
 80014e8:	e006      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      break;
 80014ea:	bf00      	nop
 80014ec:	e004      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      break;
 80014ee:	bf00      	nop
 80014f0:	e002      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80014f2:	bf00      	nop
 80014f4:	e000      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      break;
 80014f6:	bf00      	nop
    }
  } 
  
  return status; 
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	@ 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
 8001522:	e159      	b.n	80017d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001524:	2201      	movs	r2, #1
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	429a      	cmp	r2, r3
 800153e:	f040 8148 	bne.w	80017d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b01      	cmp	r3, #1
 800154c:	d005      	beq.n	800155a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001556:	2b02      	cmp	r3, #2
 8001558:	d130      	bne.n	80015bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	2203      	movs	r2, #3
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001590:	2201      	movs	r2, #1
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	f003 0201 	and.w	r2, r3, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d017      	beq.n	80015f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	2203      	movs	r2, #3
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d123      	bne.n	800164c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	08da      	lsrs	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3208      	adds	r2, #8
 800160c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	220f      	movs	r2, #15
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	08da      	lsrs	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3208      	adds	r2, #8
 8001646:	69b9      	ldr	r1, [r7, #24]
 8001648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0203 	and.w	r2, r3, #3
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80a2 	beq.w	80017d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b57      	ldr	r3, [pc, #348]	@ (80017f0 <HAL_GPIO_Init+0x2e8>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	4a56      	ldr	r2, [pc, #344]	@ (80017f0 <HAL_GPIO_Init+0x2e8>)
 8001698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800169c:	6453      	str	r3, [r2, #68]	@ 0x44
 800169e:	4b54      	ldr	r3, [pc, #336]	@ (80017f0 <HAL_GPIO_Init+0x2e8>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016aa:	4a52      	ldr	r2, [pc, #328]	@ (80017f4 <HAL_GPIO_Init+0x2ec>)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	220f      	movs	r2, #15
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a49      	ldr	r2, [pc, #292]	@ (80017f8 <HAL_GPIO_Init+0x2f0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d019      	beq.n	800170a <HAL_GPIO_Init+0x202>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a48      	ldr	r2, [pc, #288]	@ (80017fc <HAL_GPIO_Init+0x2f4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d013      	beq.n	8001706 <HAL_GPIO_Init+0x1fe>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a47      	ldr	r2, [pc, #284]	@ (8001800 <HAL_GPIO_Init+0x2f8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d00d      	beq.n	8001702 <HAL_GPIO_Init+0x1fa>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a46      	ldr	r2, [pc, #280]	@ (8001804 <HAL_GPIO_Init+0x2fc>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d007      	beq.n	80016fe <HAL_GPIO_Init+0x1f6>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a45      	ldr	r2, [pc, #276]	@ (8001808 <HAL_GPIO_Init+0x300>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d101      	bne.n	80016fa <HAL_GPIO_Init+0x1f2>
 80016f6:	2304      	movs	r3, #4
 80016f8:	e008      	b.n	800170c <HAL_GPIO_Init+0x204>
 80016fa:	2307      	movs	r3, #7
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x204>
 80016fe:	2303      	movs	r3, #3
 8001700:	e004      	b.n	800170c <HAL_GPIO_Init+0x204>
 8001702:	2302      	movs	r3, #2
 8001704:	e002      	b.n	800170c <HAL_GPIO_Init+0x204>
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <HAL_GPIO_Init+0x204>
 800170a:	2300      	movs	r3, #0
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	f002 0203 	and.w	r2, r2, #3
 8001712:	0092      	lsls	r2, r2, #2
 8001714:	4093      	lsls	r3, r2
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800171c:	4935      	ldr	r1, [pc, #212]	@ (80017f4 <HAL_GPIO_Init+0x2ec>)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	3302      	adds	r3, #2
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800172a:	4b38      	ldr	r3, [pc, #224]	@ (800180c <HAL_GPIO_Init+0x304>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800174e:	4a2f      	ldr	r2, [pc, #188]	@ (800180c <HAL_GPIO_Init+0x304>)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001754:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <HAL_GPIO_Init+0x304>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001778:	4a24      	ldr	r2, [pc, #144]	@ (800180c <HAL_GPIO_Init+0x304>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800177e:	4b23      	ldr	r3, [pc, #140]	@ (800180c <HAL_GPIO_Init+0x304>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017a2:	4a1a      	ldr	r2, [pc, #104]	@ (800180c <HAL_GPIO_Init+0x304>)
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a8:	4b18      	ldr	r3, [pc, #96]	@ (800180c <HAL_GPIO_Init+0x304>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017cc:	4a0f      	ldr	r2, [pc, #60]	@ (800180c <HAL_GPIO_Init+0x304>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3301      	adds	r3, #1
 80017d6:	61fb      	str	r3, [r7, #28]
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	2b0f      	cmp	r3, #15
 80017dc:	f67f aea2 	bls.w	8001524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3724      	adds	r7, #36	@ 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40013800 	.word	0x40013800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020400 	.word	0x40020400
 8001800:	40020800 	.word	0x40020800
 8001804:	40020c00 	.word	0x40020c00
 8001808:	40021000 	.word	0x40021000
 800180c:	40013c00 	.word	0x40013c00

08001810 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e267      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d075      	beq.n	800191a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800182e:	4b88      	ldr	r3, [pc, #544]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b04      	cmp	r3, #4
 8001838:	d00c      	beq.n	8001854 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800183a:	4b85      	ldr	r3, [pc, #532]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001842:	2b08      	cmp	r3, #8
 8001844:	d112      	bne.n	800186c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001846:	4b82      	ldr	r3, [pc, #520]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800184e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001852:	d10b      	bne.n	800186c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	4b7e      	ldr	r3, [pc, #504]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d05b      	beq.n	8001918 <HAL_RCC_OscConfig+0x108>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d157      	bne.n	8001918 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e242      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001874:	d106      	bne.n	8001884 <HAL_RCC_OscConfig+0x74>
 8001876:	4b76      	ldr	r3, [pc, #472]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a75      	ldr	r2, [pc, #468]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e01d      	b.n	80018c0 <HAL_RCC_OscConfig+0xb0>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x98>
 800188e:	4b70      	ldr	r3, [pc, #448]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a6f      	ldr	r2, [pc, #444]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001894:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b6d      	ldr	r3, [pc, #436]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a6c      	ldr	r2, [pc, #432]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0xb0>
 80018a8:	4b69      	ldr	r3, [pc, #420]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a68      	ldr	r2, [pc, #416]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80018ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b66      	ldr	r3, [pc, #408]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a65      	ldr	r2, [pc, #404]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80018ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d013      	beq.n	80018f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff f8da 	bl	8000a80 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d0:	f7ff f8d6 	bl	8000a80 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	@ 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e207      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0xc0>
 80018ee:	e014      	b.n	800191a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff f8c6 	bl	8000a80 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff f8c2 	bl	8000a80 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	@ 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e1f3      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190a:	4b51      	ldr	r3, [pc, #324]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0xe8>
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d063      	beq.n	80019ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001926:	4b4a      	ldr	r3, [pc, #296]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00b      	beq.n	800194a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001932:	4b47      	ldr	r3, [pc, #284]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800193a:	2b08      	cmp	r3, #8
 800193c:	d11c      	bne.n	8001978 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193e:	4b44      	ldr	r3, [pc, #272]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d116      	bne.n	8001978 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	4b41      	ldr	r3, [pc, #260]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <HAL_RCC_OscConfig+0x152>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d001      	beq.n	8001962 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e1c7      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001962:	4b3b      	ldr	r3, [pc, #236]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4937      	ldr	r1, [pc, #220]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	e03a      	b.n	80019ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d020      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001980:	4b34      	ldr	r3, [pc, #208]	@ (8001a54 <HAL_RCC_OscConfig+0x244>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001986:	f7ff f87b 	bl	8000a80 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800198e:	f7ff f877 	bl	8000a80 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e1a8      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ac:	4b28      	ldr	r3, [pc, #160]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4925      	ldr	r1, [pc, #148]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]
 80019c0:	e015      	b.n	80019ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c2:	4b24      	ldr	r3, [pc, #144]	@ (8001a54 <HAL_RCC_OscConfig+0x244>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff f85a 	bl	8000a80 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d0:	f7ff f856 	bl	8000a80 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e187      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d036      	beq.n	8001a68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d016      	beq.n	8001a30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a02:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <HAL_RCC_OscConfig+0x248>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a08:	f7ff f83a 	bl	8000a80 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a10:	f7ff f836 	bl	8000a80 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e167      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a22:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x200>
 8001a2e:	e01b      	b.n	8001a68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a30:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <HAL_RCC_OscConfig+0x248>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a36:	f7ff f823 	bl	8000a80 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3c:	e00e      	b.n	8001a5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3e:	f7ff f81f 	bl	8000a80 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d907      	bls.n	8001a5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e150      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
 8001a50:	40023800 	.word	0x40023800
 8001a54:	42470000 	.word	0x42470000
 8001a58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5c:	4b88      	ldr	r3, [pc, #544]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1ea      	bne.n	8001a3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 8097 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7a:	4b81      	ldr	r3, [pc, #516]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10f      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	4b7d      	ldr	r3, [pc, #500]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	4a7c      	ldr	r2, [pc, #496]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a96:	4b7a      	ldr	r3, [pc, #488]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa6:	4b77      	ldr	r3, [pc, #476]	@ (8001c84 <HAL_RCC_OscConfig+0x474>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d118      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab2:	4b74      	ldr	r3, [pc, #464]	@ (8001c84 <HAL_RCC_OscConfig+0x474>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a73      	ldr	r2, [pc, #460]	@ (8001c84 <HAL_RCC_OscConfig+0x474>)
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001abe:	f7fe ffdf 	bl	8000a80 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac6:	f7fe ffdb 	bl	8000a80 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e10c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad8:	4b6a      	ldr	r3, [pc, #424]	@ (8001c84 <HAL_RCC_OscConfig+0x474>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d106      	bne.n	8001afa <HAL_RCC_OscConfig+0x2ea>
 8001aec:	4b64      	ldr	r3, [pc, #400]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af0:	4a63      	ldr	r2, [pc, #396]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001af8:	e01c      	b.n	8001b34 <HAL_RCC_OscConfig+0x324>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b05      	cmp	r3, #5
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x30c>
 8001b02:	4b5f      	ldr	r3, [pc, #380]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b06:	4a5e      	ldr	r2, [pc, #376]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b0e:	4b5c      	ldr	r3, [pc, #368]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b12:	4a5b      	ldr	r2, [pc, #364]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0x324>
 8001b1c:	4b58      	ldr	r3, [pc, #352]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b20:	4a57      	ldr	r2, [pc, #348]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b22:	f023 0301 	bic.w	r3, r3, #1
 8001b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b28:	4b55      	ldr	r3, [pc, #340]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2c:	4a54      	ldr	r2, [pc, #336]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	f023 0304 	bic.w	r3, r3, #4
 8001b32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d015      	beq.n	8001b68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7fe ffa0 	bl	8000a80 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7fe ff9c 	bl	8000a80 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e0cb      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5a:	4b49      	ldr	r3, [pc, #292]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0ee      	beq.n	8001b44 <HAL_RCC_OscConfig+0x334>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b68:	f7fe ff8a 	bl	8000a80 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b70:	f7fe ff86 	bl	8000a80 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e0b5      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b86:	4b3e      	ldr	r3, [pc, #248]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1ee      	bne.n	8001b70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b98:	4b39      	ldr	r3, [pc, #228]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	4a38      	ldr	r2, [pc, #224]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ba2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80a1 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bae:	4b34      	ldr	r3, [pc, #208]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d05c      	beq.n	8001c74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d141      	bne.n	8001c46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc2:	4b31      	ldr	r3, [pc, #196]	@ (8001c88 <HAL_RCC_OscConfig+0x478>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7fe ff5a 	bl	8000a80 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd0:	f7fe ff56 	bl	8000a80 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e087      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be2:	4b27      	ldr	r3, [pc, #156]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69da      	ldr	r2, [r3, #28]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfc:	019b      	lsls	r3, r3, #6
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	3b01      	subs	r3, #1
 8001c08:	041b      	lsls	r3, r3, #16
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c10:	061b      	lsls	r3, r3, #24
 8001c12:	491b      	ldr	r1, [pc, #108]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c18:	4b1b      	ldr	r3, [pc, #108]	@ (8001c88 <HAL_RCC_OscConfig+0x478>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7fe ff2f 	bl	8000a80 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c26:	f7fe ff2b 	bl	8000a80 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e05c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c38:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x416>
 8001c44:	e054      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c46:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <HAL_RCC_OscConfig+0x478>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7fe ff18 	bl	8000a80 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c54:	f7fe ff14 	bl	8000a80 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e045      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x444>
 8001c72:	e03d      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e038      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40007000 	.word	0x40007000
 8001c88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <HAL_RCC_OscConfig+0x4ec>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d028      	beq.n	8001cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d121      	bne.n	8001cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d11a      	bne.n	8001cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d111      	bne.n	8001cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd2:	085b      	lsrs	r3, r3, #1
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d107      	bne.n	8001cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800

08001d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0cc      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d14:	4b68      	ldr	r3, [pc, #416]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d90c      	bls.n	8001d3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b65      	ldr	r3, [pc, #404]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b63      	ldr	r3, [pc, #396]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0b8      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d54:	4b59      	ldr	r3, [pc, #356]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4a58      	ldr	r2, [pc, #352]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d6c:	4b53      	ldr	r3, [pc, #332]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4a52      	ldr	r2, [pc, #328]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4b50      	ldr	r3, [pc, #320]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	494d      	ldr	r1, [pc, #308]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d044      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	4b47      	ldr	r3, [pc, #284]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d119      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e07f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d003      	beq.n	8001dbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e06f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dce:	4b3b      	ldr	r3, [pc, #236]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e067      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dde:	4b37      	ldr	r3, [pc, #220]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f023 0203 	bic.w	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4934      	ldr	r1, [pc, #208]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df0:	f7fe fe46 	bl	8000a80 <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df8:	f7fe fe42 	bl	8000a80 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e04f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 020c 	and.w	r2, r3, #12
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d1eb      	bne.n	8001df8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e20:	4b25      	ldr	r3, [pc, #148]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d20c      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b22      	ldr	r3, [pc, #136]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e032      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e54:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4916      	ldr	r1, [pc, #88]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e72:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	490e      	ldr	r1, [pc, #56]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e86:	f000 f821 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	490a      	ldr	r1, [pc, #40]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	5ccb      	ldrb	r3, [r1, r3]
 8001e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9e:	4a09      	ldr	r2, [pc, #36]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ea2:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fda6 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023c00 	.word	0x40023c00
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	080035d0 	.word	0x080035d0
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	2000000c 	.word	0x2000000c

08001ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ed0:	b094      	sub	sp, #80	@ 0x50
 8001ed2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ed8:	2300      	movs	r3, #0
 8001eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001edc:	2300      	movs	r3, #0
 8001ede:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ee4:	4b79      	ldr	r3, [pc, #484]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d00d      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x40>
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	f200 80e1 	bhi.w	80020b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0x34>
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d003      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0x3a>
 8001efe:	e0db      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f00:	4b73      	ldr	r3, [pc, #460]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f02:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001f04:	e0db      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f06:	4b73      	ldr	r3, [pc, #460]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f0a:	e0d8      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f14:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f16:	4b6d      	ldr	r3, [pc, #436]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d063      	beq.n	8001fea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f22:	4b6a      	ldr	r3, [pc, #424]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	099b      	lsrs	r3, r3, #6
 8001f28:	2200      	movs	r2, #0
 8001f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f34:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f36:	2300      	movs	r3, #0
 8001f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f3e:	4622      	mov	r2, r4
 8001f40:	462b      	mov	r3, r5
 8001f42:	f04f 0000 	mov.w	r0, #0
 8001f46:	f04f 0100 	mov.w	r1, #0
 8001f4a:	0159      	lsls	r1, r3, #5
 8001f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f50:	0150      	lsls	r0, r2, #5
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4621      	mov	r1, r4
 8001f58:	1a51      	subs	r1, r2, r1
 8001f5a:	6139      	str	r1, [r7, #16]
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f70:	4659      	mov	r1, fp
 8001f72:	018b      	lsls	r3, r1, #6
 8001f74:	4651      	mov	r1, sl
 8001f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f7a:	4651      	mov	r1, sl
 8001f7c:	018a      	lsls	r2, r1, #6
 8001f7e:	4651      	mov	r1, sl
 8001f80:	ebb2 0801 	subs.w	r8, r2, r1
 8001f84:	4659      	mov	r1, fp
 8001f86:	eb63 0901 	sbc.w	r9, r3, r1
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f9e:	4690      	mov	r8, r2
 8001fa0:	4699      	mov	r9, r3
 8001fa2:	4623      	mov	r3, r4
 8001fa4:	eb18 0303 	adds.w	r3, r8, r3
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	462b      	mov	r3, r5
 8001fac:	eb49 0303 	adc.w	r3, r9, r3
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	024b      	lsls	r3, r1, #9
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fc8:	4621      	mov	r1, r4
 8001fca:	024a      	lsls	r2, r1, #9
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fdc:	f7fe f8fc 	bl	80001d8 <__aeabi_uldivmod>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fe8:	e058      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fea:	4b38      	ldr	r3, [pc, #224]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	099b      	lsrs	r3, r3, #6
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ffa:	623b      	str	r3, [r7, #32]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002000:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002004:	4642      	mov	r2, r8
 8002006:	464b      	mov	r3, r9
 8002008:	f04f 0000 	mov.w	r0, #0
 800200c:	f04f 0100 	mov.w	r1, #0
 8002010:	0159      	lsls	r1, r3, #5
 8002012:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002016:	0150      	lsls	r0, r2, #5
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4641      	mov	r1, r8
 800201e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002022:	4649      	mov	r1, r9
 8002024:	eb63 0b01 	sbc.w	fp, r3, r1
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002034:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002038:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800203c:	ebb2 040a 	subs.w	r4, r2, sl
 8002040:	eb63 050b 	sbc.w	r5, r3, fp
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	00eb      	lsls	r3, r5, #3
 800204e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002052:	00e2      	lsls	r2, r4, #3
 8002054:	4614      	mov	r4, r2
 8002056:	461d      	mov	r5, r3
 8002058:	4643      	mov	r3, r8
 800205a:	18e3      	adds	r3, r4, r3
 800205c:	603b      	str	r3, [r7, #0]
 800205e:	464b      	mov	r3, r9
 8002060:	eb45 0303 	adc.w	r3, r5, r3
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002072:	4629      	mov	r1, r5
 8002074:	028b      	lsls	r3, r1, #10
 8002076:	4621      	mov	r1, r4
 8002078:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800207c:	4621      	mov	r1, r4
 800207e:	028a      	lsls	r2, r1, #10
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002086:	2200      	movs	r2, #0
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	61fa      	str	r2, [r7, #28]
 800208c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002090:	f7fe f8a2 	bl	80001d8 <__aeabi_uldivmod>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4613      	mov	r3, r2
 800209a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800209c:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	3301      	adds	r3, #1
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80020ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020b6:	e002      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80020ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3750      	adds	r7, #80	@ 0x50
 80020c4:	46bd      	mov	sp, r7
 80020c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800
 80020d0:	00f42400 	.word	0x00f42400
 80020d4:	007a1200 	.word	0x007a1200

080020d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020dc:	4b03      	ldr	r3, [pc, #12]	@ (80020ec <HAL_RCC_GetHCLKFreq+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000008 	.word	0x20000008

080020f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020f4:	f7ff fff0 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	4b05      	ldr	r3, [pc, #20]	@ (8002110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0a9b      	lsrs	r3, r3, #10
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4903      	ldr	r1, [pc, #12]	@ (8002114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002106:	5ccb      	ldrb	r3, [r1, r3]
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	080035e0 	.word	0x080035e0

08002118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800211c:	f7ff ffdc 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	0b5b      	lsrs	r3, r3, #13
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	4903      	ldr	r1, [pc, #12]	@ (800213c <HAL_RCC_GetPCLK2Freq+0x24>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	080035e0 	.word	0x080035e0

08002140 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e042      	b.n	80021d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7fe fae6 	bl	8000738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2224      	movs	r2, #36	@ 0x24
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002182:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 ff77 	bl	8003078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002198:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08c      	sub	sp, #48	@ 0x30
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	4613      	mov	r3, r2
 80021ec:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d156      	bne.n	80022a8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <HAL_UART_Transmit_DMA+0x26>
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e04f      	b.n	80022aa <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	88fa      	ldrh	r2, [r7, #6]
 8002214:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	88fa      	ldrh	r2, [r7, #6]
 800221a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2221      	movs	r2, #33	@ 0x21
 8002226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222e:	4a21      	ldr	r2, [pc, #132]	@ (80022b4 <HAL_UART_Transmit_DMA+0xd4>)
 8002230:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002236:	4a20      	ldr	r2, [pc, #128]	@ (80022b8 <HAL_UART_Transmit_DMA+0xd8>)
 8002238:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800223e:	4a1f      	ldr	r2, [pc, #124]	@ (80022bc <HAL_UART_Transmit_DMA+0xdc>)
 8002240:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002246:	2200      	movs	r2, #0
 8002248:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800224a:	f107 0308 	add.w	r3, r7, #8
 800224e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002256:	6819      	ldr	r1, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3304      	adds	r3, #4
 800225e:	461a      	mov	r2, r3
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	f7fe fdfd 	bl	8000e60 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800226e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3314      	adds	r3, #20
 8002276:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	e853 3f00 	ldrex	r3, [r3]
 800227e:	617b      	str	r3, [r7, #20]
   return(result);
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002286:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3314      	adds	r3, #20
 800228e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002290:	627a      	str	r2, [r7, #36]	@ 0x24
 8002292:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002294:	6a39      	ldr	r1, [r7, #32]
 8002296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002298:	e841 2300 	strex	r3, r2, [r1]
 800229c:	61fb      	str	r3, [r7, #28]
   return(result);
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1e5      	bne.n	8002270 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e000      	b.n	80022aa <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80022a8:	2302      	movs	r3, #2
  }
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3730      	adds	r7, #48	@ 0x30
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	08002905 	.word	0x08002905
 80022b8:	0800299f 	.word	0x0800299f
 80022bc:	08002b23 	.word	0x08002b23

080022c0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08c      	sub	sp, #48	@ 0x30
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	4613      	mov	r3, r2
 80022cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	d14a      	bne.n	8002370 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e043      	b.n	8002372 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2201      	movs	r2, #1
 80022ee:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	461a      	mov	r2, r3
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 fc5b 	bl	8002bb8 <UART_Start_Receive_DMA>
 8002302:	4603      	mov	r3, r0
 8002304:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002308:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800230c:	2b00      	cmp	r3, #0
 800230e:	d12c      	bne.n	800236a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002314:	2b01      	cmp	r3, #1
 8002316:	d125      	bne.n	8002364 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	330c      	adds	r3, #12
 8002334:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	e853 3f00 	ldrex	r3, [r3]
 800233c:	617b      	str	r3, [r7, #20]
   return(result);
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f043 0310 	orr.w	r3, r3, #16
 8002344:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	330c      	adds	r3, #12
 800234c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800234e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002352:	6a39      	ldr	r1, [r7, #32]
 8002354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002356:	e841 2300 	strex	r3, r2, [r1]
 800235a:	61fb      	str	r3, [r7, #28]
   return(result);
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1e5      	bne.n	800232e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8002362:	e002      	b.n	800236a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800236a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800236e:	e000      	b.n	8002372 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
  }
}
 8002372:	4618      	mov	r0, r3
 8002374:	3730      	adds	r7, #48	@ 0x30
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b0ba      	sub	sp, #232	@ 0xe8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80023ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10f      	bne.n	80023e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023c6:	f003 0320 	and.w	r3, r3, #32
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HAL_UART_IRQHandler+0x66>
 80023ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 fd8d 	bl	8002efa <UART_Receive_IT>
      return;
 80023e0:	e25b      	b.n	800289a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80023e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 80de 	beq.w	80025a8 <HAL_UART_IRQHandler+0x22c>
 80023ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d106      	bne.n	8002406 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80d1 	beq.w	80025a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00b      	beq.n	800242a <HAL_UART_IRQHandler+0xae>
 8002412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002422:	f043 0201 	orr.w	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800242a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00b      	beq.n	800244e <HAL_UART_IRQHandler+0xd2>
 8002436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	f043 0202 	orr.w	r2, r3, #2
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800244e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_UART_IRQHandler+0xf6>
 800245a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	f043 0204 	orr.w	r2, r3, #4
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d011      	beq.n	80024a2 <HAL_UART_IRQHandler+0x126>
 800247e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d105      	bne.n	8002496 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800248a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249a:	f043 0208 	orr.w	r2, r3, #8
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 81f2 	beq.w	8002890 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_UART_IRQHandler+0x14e>
 80024b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fd18 	bl	8002efa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d4:	2b40      	cmp	r3, #64	@ 0x40
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d103      	bne.n	80024f6 <HAL_UART_IRQHandler+0x17a>
 80024ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d04f      	beq.n	8002596 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fc20 	bl	8002d3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002506:	2b40      	cmp	r3, #64	@ 0x40
 8002508:	d141      	bne.n	800258e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3314      	adds	r3, #20
 8002510:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002514:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002518:	e853 3f00 	ldrex	r3, [r3]
 800251c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002520:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002524:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002528:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	3314      	adds	r3, #20
 8002532:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002536:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800253a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002542:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002546:	e841 2300 	strex	r3, r2, [r1]
 800254a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800254e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1d9      	bne.n	800250a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800255a:	2b00      	cmp	r3, #0
 800255c:	d013      	beq.n	8002586 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002562:	4a7e      	ldr	r2, [pc, #504]	@ (800275c <HAL_UART_IRQHandler+0x3e0>)
 8002564:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fd40 	bl	8000ff0 <HAL_DMA_Abort_IT>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d016      	beq.n	80025a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800257a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002580:	4610      	mov	r0, r2
 8002582:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002584:	e00e      	b.n	80025a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f9b2 	bl	80028f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800258c:	e00a      	b.n	80025a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f9ae 	bl	80028f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002594:	e006      	b.n	80025a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f9aa 	bl	80028f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80025a2:	e175      	b.n	8002890 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a4:	bf00      	nop
    return;
 80025a6:	e173      	b.n	8002890 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	f040 814f 	bne.w	8002850 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80025b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8148 	beq.w	8002850 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80025c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8141 	beq.w	8002850 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ee:	2b40      	cmp	r3, #64	@ 0x40
 80025f0:	f040 80b6 	bne.w	8002760 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002600:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8145 	beq.w	8002894 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800260e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002612:	429a      	cmp	r2, r3
 8002614:	f080 813e 	bcs.w	8002894 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800261e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800262a:	f000 8088 	beq.w	800273e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	330c      	adds	r3, #12
 8002634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002638:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800263c:	e853 3f00 	ldrex	r3, [r3]
 8002640:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002644:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800264c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	330c      	adds	r3, #12
 8002656:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800265a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800265e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002662:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002666:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800266a:	e841 2300 	strex	r3, r2, [r1]
 800266e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1d9      	bne.n	800262e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	3314      	adds	r3, #20
 8002680:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002682:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002684:	e853 3f00 	ldrex	r3, [r3]
 8002688:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800268a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	3314      	adds	r3, #20
 800269a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800269e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80026a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80026a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80026aa:	e841 2300 	strex	r3, r2, [r1]
 80026ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80026b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1e1      	bne.n	800267a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3314      	adds	r3, #20
 80026bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026c0:	e853 3f00 	ldrex	r3, [r3]
 80026c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80026c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3314      	adds	r3, #20
 80026d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80026da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80026dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80026e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80026e2:	e841 2300 	strex	r3, r2, [r1]
 80026e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80026e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1e3      	bne.n	80026b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	330c      	adds	r3, #12
 8002702:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002706:	e853 3f00 	ldrex	r3, [r3]
 800270a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800270c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800270e:	f023 0310 	bic.w	r3, r3, #16
 8002712:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	330c      	adds	r3, #12
 800271c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002720:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002722:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002724:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002726:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002728:	e841 2300 	strex	r3, r2, [r1]
 800272c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800272e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1e3      	bne.n	80026fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe fbe9 	bl	8000f10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2202      	movs	r2, #2
 8002742:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800274c:	b29b      	uxth	r3, r3
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	b29b      	uxth	r3, r3
 8002752:	4619      	mov	r1, r3
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7fd feb7 	bl	80004c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800275a:	e09b      	b.n	8002894 <HAL_UART_IRQHandler+0x518>
 800275c:	08002e03 	.word	0x08002e03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002768:	b29b      	uxth	r3, r3
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002774:	b29b      	uxth	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 808e 	beq.w	8002898 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800277c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 8089 	beq.w	8002898 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	330c      	adds	r3, #12
 800278c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002790:	e853 3f00 	ldrex	r3, [r3]
 8002794:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002798:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800279c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	330c      	adds	r3, #12
 80027a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80027aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80027ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80027b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027b2:	e841 2300 	strex	r3, r2, [r1]
 80027b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80027b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1e3      	bne.n	8002786 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3314      	adds	r3, #20
 80027c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	e853 3f00 	ldrex	r3, [r3]
 80027cc:	623b      	str	r3, [r7, #32]
   return(result);
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3314      	adds	r3, #20
 80027de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80027e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80027e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027ea:	e841 2300 	strex	r3, r2, [r1]
 80027ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80027f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1e3      	bne.n	80027be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	330c      	adds	r3, #12
 800280a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	e853 3f00 	ldrex	r3, [r3]
 8002812:	60fb      	str	r3, [r7, #12]
   return(result);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0310 	bic.w	r3, r3, #16
 800281a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	330c      	adds	r3, #12
 8002824:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002828:	61fa      	str	r2, [r7, #28]
 800282a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282c:	69b9      	ldr	r1, [r7, #24]
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	e841 2300 	strex	r3, r2, [r1]
 8002834:	617b      	str	r3, [r7, #20]
   return(result);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1e3      	bne.n	8002804 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002842:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002846:	4619      	mov	r1, r3
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7fd fe3d 	bl	80004c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800284e:	e023      	b.n	8002898 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002858:	2b00      	cmp	r3, #0
 800285a:	d009      	beq.n	8002870 <HAL_UART_IRQHandler+0x4f4>
 800285c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fade 	bl	8002e2a <UART_Transmit_IT>
    return;
 800286e:	e014      	b.n	800289a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00e      	beq.n	800289a <HAL_UART_IRQHandler+0x51e>
 800287c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 fb1e 	bl	8002eca <UART_EndTransmit_IT>
    return;
 800288e:	e004      	b.n	800289a <HAL_UART_IRQHandler+0x51e>
    return;
 8002890:	bf00      	nop
 8002892:	e002      	b.n	800289a <HAL_UART_IRQHandler+0x51e>
      return;
 8002894:	bf00      	nop
 8002896:	e000      	b.n	800289a <HAL_UART_IRQHandler+0x51e>
      return;
 8002898:	bf00      	nop
  }
}
 800289a:	37e8      	adds	r7, #232	@ 0xe8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b090      	sub	sp, #64	@ 0x40
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002910:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d137      	bne.n	8002990 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002922:	2200      	movs	r2, #0
 8002924:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	3314      	adds	r3, #20
 800292c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	e853 3f00 	ldrex	r3, [r3]
 8002934:	623b      	str	r3, [r7, #32]
   return(result);
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800293c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800293e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3314      	adds	r3, #20
 8002944:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002946:	633a      	str	r2, [r7, #48]	@ 0x30
 8002948:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800294c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800294e:	e841 2300 	strex	r3, r2, [r1]
 8002952:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e5      	bne.n	8002926 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800295a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	330c      	adds	r3, #12
 8002960:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	e853 3f00 	ldrex	r3, [r3]
 8002968:	60fb      	str	r3, [r7, #12]
   return(result);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002970:	637b      	str	r3, [r7, #52]	@ 0x34
 8002972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	330c      	adds	r3, #12
 8002978:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800297a:	61fa      	str	r2, [r7, #28]
 800297c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297e:	69b9      	ldr	r1, [r7, #24]
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	e841 2300 	strex	r3, r2, [r1]
 8002986:	617b      	str	r3, [r7, #20]
   return(result);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1e5      	bne.n	800295a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800298e:	e002      	b.n	8002996 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002990:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002992:	f7ff ff85 	bl	80028a0 <HAL_UART_TxCpltCallback>
}
 8002996:	bf00      	nop
 8002998:	3740      	adds	r7, #64	@ 0x40
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f7ff ff81 	bl	80028b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b09c      	sub	sp, #112	@ 0x70
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d172      	bne.n	8002abc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80029d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029d8:	2200      	movs	r2, #0
 80029da:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	330c      	adds	r3, #12
 80029e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029e6:	e853 3f00 	ldrex	r3, [r3]
 80029ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80029ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	330c      	adds	r3, #12
 80029fa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80029fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80029fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a04:	e841 2300 	strex	r3, r2, [r1]
 8002a08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1e5      	bne.n	80029dc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3314      	adds	r3, #20
 8002a16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a1a:	e853 3f00 	ldrex	r3, [r3]
 8002a1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a22:	f023 0301 	bic.w	r3, r3, #1
 8002a26:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	3314      	adds	r3, #20
 8002a2e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002a30:	647a      	str	r2, [r7, #68]	@ 0x44
 8002a32:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a38:	e841 2300 	strex	r3, r2, [r1]
 8002a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e5      	bne.n	8002a10 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3314      	adds	r3, #20
 8002a4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4e:	e853 3f00 	ldrex	r3, [r3]
 8002a52:	623b      	str	r3, [r7, #32]
   return(result);
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	3314      	adds	r3, #20
 8002a62:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a64:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a6c:	e841 2300 	strex	r3, r2, [r1]
 8002a70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1e5      	bne.n	8002a44 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d119      	bne.n	8002abc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	e853 3f00 	ldrex	r3, [r3]
 8002a96:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f023 0310 	bic.w	r3, r3, #16
 8002a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002aa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002aa8:	61fa      	str	r2, [r7, #28]
 8002aaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aac:	69b9      	ldr	r1, [r7, #24]
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	e841 2300 	strex	r3, r2, [r1]
 8002ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e5      	bne.n	8002a88 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002abc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002abe:	2200      	movs	r2, #0
 8002ac0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d106      	bne.n	8002ad8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002aca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002acc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002ad2:	f7fd fcf9 	bl	80004c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ad6:	e002      	b.n	8002ade <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002ad8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002ada:	f7ff fef5 	bl	80028c8 <HAL_UART_RxCpltCallback>
}
 8002ade:	bf00      	nop
 8002ae0:	3770      	adds	r7, #112	@ 0x70
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2201      	movs	r2, #1
 8002af8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d108      	bne.n	8002b14 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b06:	085b      	lsrs	r3, r3, #1
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f7fd fcdb 	bl	80004c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b12:	e002      	b.n	8002b1a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff fee1 	bl	80028dc <HAL_UART_RxHalfCpltCallback>
}
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b32:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b3e:	2b80      	cmp	r3, #128	@ 0x80
 8002b40:	bf0c      	ite	eq
 8002b42:	2301      	moveq	r3, #1
 8002b44:	2300      	movne	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b21      	cmp	r3, #33	@ 0x21
 8002b54:	d108      	bne.n	8002b68 <UART_DMAError+0x46>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002b62:	68b8      	ldr	r0, [r7, #8]
 8002b64:	f000 f8c2 	bl	8002cec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b72:	2b40      	cmp	r3, #64	@ 0x40
 8002b74:	bf0c      	ite	eq
 8002b76:	2301      	moveq	r3, #1
 8002b78:	2300      	movne	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b22      	cmp	r3, #34	@ 0x22
 8002b88:	d108      	bne.n	8002b9c <UART_DMAError+0x7a>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2200      	movs	r2, #0
 8002b94:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002b96:	68b8      	ldr	r0, [r7, #8]
 8002b98:	f000 f8d0 	bl	8002d3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba0:	f043 0210 	orr.w	r2, r3, #16
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ba8:	68b8      	ldr	r0, [r7, #8]
 8002baa:	f7ff fea1 	bl	80028f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b098      	sub	sp, #96	@ 0x60
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	88fa      	ldrh	r2, [r7, #6]
 8002bd0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2222      	movs	r2, #34	@ 0x22
 8002bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be4:	4a3e      	ldr	r2, [pc, #248]	@ (8002ce0 <UART_Start_Receive_DMA+0x128>)
 8002be6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bec:	4a3d      	ldr	r2, [pc, #244]	@ (8002ce4 <UART_Start_Receive_DMA+0x12c>)
 8002bee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf4:	4a3c      	ldr	r2, [pc, #240]	@ (8002ce8 <UART_Start_Receive_DMA+0x130>)
 8002bf6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002c00:	f107 0308 	add.w	r3, r7, #8
 8002c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	4619      	mov	r1, r3
 8002c12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	f7fe f922 	bl	8000e60 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d019      	beq.n	8002c6e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	330c      	adds	r3, #12
 8002c40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c44:	e853 3f00 	ldrex	r3, [r3]
 8002c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	330c      	adds	r3, #12
 8002c58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c5a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002c60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c62:	e841 2300 	strex	r3, r2, [r1]
 8002c66:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002c68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1e5      	bne.n	8002c3a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3314      	adds	r3, #20
 8002c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	3314      	adds	r3, #20
 8002c8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c8e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002c90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c92:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002c94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c96:	e841 2300 	strex	r3, r2, [r1]
 8002c9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1e5      	bne.n	8002c6e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3314      	adds	r3, #20
 8002ca8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	617b      	str	r3, [r7, #20]
   return(result);
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cb8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3314      	adds	r3, #20
 8002cc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002cc2:	627a      	str	r2, [r7, #36]	@ 0x24
 8002cc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc6:	6a39      	ldr	r1, [r7, #32]
 8002cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cca:	e841 2300 	strex	r3, r2, [r1]
 8002cce:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e5      	bne.n	8002ca2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3760      	adds	r7, #96	@ 0x60
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	080029bb 	.word	0x080029bb
 8002ce4:	08002ae7 	.word	0x08002ae7
 8002ce8:	08002b23 	.word	0x08002b23

08002cec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	@ 0x24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	330c      	adds	r3, #12
 8002cfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	e853 3f00 	ldrex	r3, [r3]
 8002d02:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002d0a:	61fb      	str	r3, [r7, #28]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	330c      	adds	r3, #12
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	61ba      	str	r2, [r7, #24]
 8002d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d18:	6979      	ldr	r1, [r7, #20]
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	e841 2300 	strex	r3, r2, [r1]
 8002d20:	613b      	str	r3, [r7, #16]
   return(result);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e5      	bne.n	8002cf4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002d30:	bf00      	nop
 8002d32:	3724      	adds	r7, #36	@ 0x24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b095      	sub	sp, #84	@ 0x54
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d4e:	e853 3f00 	ldrex	r3, [r3]
 8002d52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	330c      	adds	r3, #12
 8002d62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d64:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d6c:	e841 2300 	strex	r3, r2, [r1]
 8002d70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e5      	bne.n	8002d44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3314      	adds	r3, #20
 8002d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	e853 3f00 	ldrex	r3, [r3]
 8002d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3314      	adds	r3, #20
 8002d96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002da0:	e841 2300 	strex	r3, r2, [r1]
 8002da4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1e5      	bne.n	8002d78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d119      	bne.n	8002de8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	330c      	adds	r3, #12
 8002dba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	e853 3f00 	ldrex	r3, [r3]
 8002dc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f023 0310 	bic.w	r3, r3, #16
 8002dca:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dd4:	61ba      	str	r2, [r7, #24]
 8002dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd8:	6979      	ldr	r1, [r7, #20]
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	e841 2300 	strex	r3, r2, [r1]
 8002de0:	613b      	str	r3, [r7, #16]
   return(result);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1e5      	bne.n	8002db4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002df6:	bf00      	nop
 8002df8:	3754      	adds	r7, #84	@ 0x54
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f7ff fd67 	bl	80028f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e22:	bf00      	nop
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b21      	cmp	r3, #33	@ 0x21
 8002e3c:	d13e      	bne.n	8002ebc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e46:	d114      	bne.n	8002e72 <UART_Transmit_IT+0x48>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d110      	bne.n	8002e72 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	1c9a      	adds	r2, r3, #2
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	621a      	str	r2, [r3, #32]
 8002e70:	e008      	b.n	8002e84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	1c59      	adds	r1, r3, #1
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6211      	str	r1, [r2, #32]
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	4619      	mov	r1, r3
 8002e92:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10f      	bne.n	8002eb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ea6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e000      	b.n	8002ebe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ebc:	2302      	movs	r3, #2
  }
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ee0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff fcd8 	bl	80028a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b08c      	sub	sp, #48	@ 0x30
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b22      	cmp	r3, #34	@ 0x22
 8002f0c:	f040 80ae 	bne.w	800306c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f18:	d117      	bne.n	8002f4a <UART_Receive_IT+0x50>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d113      	bne.n	8002f4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f42:	1c9a      	adds	r2, r3, #2
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f48:	e026      	b.n	8002f98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f5c:	d007      	beq.n	8002f6e <UART_Receive_IT+0x74>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10a      	bne.n	8002f7c <UART_Receive_IT+0x82>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e008      	b.n	8002f8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d15d      	bne.n	8003068 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0220 	bic.w	r2, r2, #32
 8002fba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d135      	bne.n	800305e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	330c      	adds	r3, #12
 8002ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	e853 3f00 	ldrex	r3, [r3]
 8003006:	613b      	str	r3, [r7, #16]
   return(result);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f023 0310 	bic.w	r3, r3, #16
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	330c      	adds	r3, #12
 8003016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003018:	623a      	str	r2, [r7, #32]
 800301a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301c:	69f9      	ldr	r1, [r7, #28]
 800301e:	6a3a      	ldr	r2, [r7, #32]
 8003020:	e841 2300 	strex	r3, r2, [r1]
 8003024:	61bb      	str	r3, [r7, #24]
   return(result);
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e5      	bne.n	8002ff8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b10      	cmp	r3, #16
 8003038:	d10a      	bne.n	8003050 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003054:	4619      	mov	r1, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fd fa36 	bl	80004c8 <HAL_UARTEx_RxEventCallback>
 800305c:	e002      	b.n	8003064 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff fc32 	bl	80028c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	e002      	b.n	800306e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	e000      	b.n	800306e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800306c:	2302      	movs	r3, #2
  }
}
 800306e:	4618      	mov	r0, r3
 8003070:	3730      	adds	r7, #48	@ 0x30
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800307c:	b0c0      	sub	sp, #256	@ 0x100
 800307e:	af00      	add	r7, sp, #0
 8003080:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003094:	68d9      	ldr	r1, [r3, #12]
 8003096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	ea40 0301 	orr.w	r3, r0, r1
 80030a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80030d0:	f021 010c 	bic.w	r1, r1, #12
 80030d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80030de:	430b      	orrs	r3, r1
 80030e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80030ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f2:	6999      	ldr	r1, [r3, #24]
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	ea40 0301 	orr.w	r3, r0, r1
 80030fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	4b8f      	ldr	r3, [pc, #572]	@ (8003344 <UART_SetConfig+0x2cc>)
 8003108:	429a      	cmp	r2, r3
 800310a:	d005      	beq.n	8003118 <UART_SetConfig+0xa0>
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	4b8d      	ldr	r3, [pc, #564]	@ (8003348 <UART_SetConfig+0x2d0>)
 8003114:	429a      	cmp	r2, r3
 8003116:	d104      	bne.n	8003122 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003118:	f7fe fffe 	bl	8002118 <HAL_RCC_GetPCLK2Freq>
 800311c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003120:	e003      	b.n	800312a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003122:	f7fe ffe5 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8003126:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800312a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003134:	f040 810c 	bne.w	8003350 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800313c:	2200      	movs	r2, #0
 800313e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003142:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003146:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800314a:	4622      	mov	r2, r4
 800314c:	462b      	mov	r3, r5
 800314e:	1891      	adds	r1, r2, r2
 8003150:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003152:	415b      	adcs	r3, r3
 8003154:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003156:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800315a:	4621      	mov	r1, r4
 800315c:	eb12 0801 	adds.w	r8, r2, r1
 8003160:	4629      	mov	r1, r5
 8003162:	eb43 0901 	adc.w	r9, r3, r1
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800317a:	4690      	mov	r8, r2
 800317c:	4699      	mov	r9, r3
 800317e:	4623      	mov	r3, r4
 8003180:	eb18 0303 	adds.w	r3, r8, r3
 8003184:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003188:	462b      	mov	r3, r5
 800318a:	eb49 0303 	adc.w	r3, r9, r3
 800318e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800319e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80031a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80031a6:	460b      	mov	r3, r1
 80031a8:	18db      	adds	r3, r3, r3
 80031aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80031ac:	4613      	mov	r3, r2
 80031ae:	eb42 0303 	adc.w	r3, r2, r3
 80031b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80031b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80031b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80031bc:	f7fd f80c 	bl	80001d8 <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4b61      	ldr	r3, [pc, #388]	@ (800334c <UART_SetConfig+0x2d4>)
 80031c6:	fba3 2302 	umull	r2, r3, r3, r2
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	011c      	lsls	r4, r3, #4
 80031ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80031dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80031e0:	4642      	mov	r2, r8
 80031e2:	464b      	mov	r3, r9
 80031e4:	1891      	adds	r1, r2, r2
 80031e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80031e8:	415b      	adcs	r3, r3
 80031ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80031f0:	4641      	mov	r1, r8
 80031f2:	eb12 0a01 	adds.w	sl, r2, r1
 80031f6:	4649      	mov	r1, r9
 80031f8:	eb43 0b01 	adc.w	fp, r3, r1
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003208:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800320c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003210:	4692      	mov	sl, r2
 8003212:	469b      	mov	fp, r3
 8003214:	4643      	mov	r3, r8
 8003216:	eb1a 0303 	adds.w	r3, sl, r3
 800321a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800321e:	464b      	mov	r3, r9
 8003220:	eb4b 0303 	adc.w	r3, fp, r3
 8003224:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003234:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003238:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800323c:	460b      	mov	r3, r1
 800323e:	18db      	adds	r3, r3, r3
 8003240:	643b      	str	r3, [r7, #64]	@ 0x40
 8003242:	4613      	mov	r3, r2
 8003244:	eb42 0303 	adc.w	r3, r2, r3
 8003248:	647b      	str	r3, [r7, #68]	@ 0x44
 800324a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800324e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003252:	f7fc ffc1 	bl	80001d8 <__aeabi_uldivmod>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4611      	mov	r1, r2
 800325c:	4b3b      	ldr	r3, [pc, #236]	@ (800334c <UART_SetConfig+0x2d4>)
 800325e:	fba3 2301 	umull	r2, r3, r3, r1
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2264      	movs	r2, #100	@ 0x64
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	1acb      	subs	r3, r1, r3
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003272:	4b36      	ldr	r3, [pc, #216]	@ (800334c <UART_SetConfig+0x2d4>)
 8003274:	fba3 2302 	umull	r2, r3, r3, r2
 8003278:	095b      	lsrs	r3, r3, #5
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003280:	441c      	add	r4, r3
 8003282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003286:	2200      	movs	r2, #0
 8003288:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800328c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003290:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003294:	4642      	mov	r2, r8
 8003296:	464b      	mov	r3, r9
 8003298:	1891      	adds	r1, r2, r2
 800329a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800329c:	415b      	adcs	r3, r3
 800329e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80032a4:	4641      	mov	r1, r8
 80032a6:	1851      	adds	r1, r2, r1
 80032a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80032aa:	4649      	mov	r1, r9
 80032ac:	414b      	adcs	r3, r1
 80032ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80032bc:	4659      	mov	r1, fp
 80032be:	00cb      	lsls	r3, r1, #3
 80032c0:	4651      	mov	r1, sl
 80032c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032c6:	4651      	mov	r1, sl
 80032c8:	00ca      	lsls	r2, r1, #3
 80032ca:	4610      	mov	r0, r2
 80032cc:	4619      	mov	r1, r3
 80032ce:	4603      	mov	r3, r0
 80032d0:	4642      	mov	r2, r8
 80032d2:	189b      	adds	r3, r3, r2
 80032d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032d8:	464b      	mov	r3, r9
 80032da:	460a      	mov	r2, r1
 80032dc:	eb42 0303 	adc.w	r3, r2, r3
 80032e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80032f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80032f8:	460b      	mov	r3, r1
 80032fa:	18db      	adds	r3, r3, r3
 80032fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032fe:	4613      	mov	r3, r2
 8003300:	eb42 0303 	adc.w	r3, r2, r3
 8003304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003306:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800330a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800330e:	f7fc ff63 	bl	80001d8 <__aeabi_uldivmod>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4b0d      	ldr	r3, [pc, #52]	@ (800334c <UART_SetConfig+0x2d4>)
 8003318:	fba3 1302 	umull	r1, r3, r3, r2
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	2164      	movs	r1, #100	@ 0x64
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	3332      	adds	r3, #50	@ 0x32
 800332a:	4a08      	ldr	r2, [pc, #32]	@ (800334c <UART_SetConfig+0x2d4>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	f003 0207 	and.w	r2, r3, #7
 8003336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4422      	add	r2, r4
 800333e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003340:	e106      	b.n	8003550 <UART_SetConfig+0x4d8>
 8003342:	bf00      	nop
 8003344:	40011000 	.word	0x40011000
 8003348:	40011400 	.word	0x40011400
 800334c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003354:	2200      	movs	r2, #0
 8003356:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800335a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800335e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003362:	4642      	mov	r2, r8
 8003364:	464b      	mov	r3, r9
 8003366:	1891      	adds	r1, r2, r2
 8003368:	6239      	str	r1, [r7, #32]
 800336a:	415b      	adcs	r3, r3
 800336c:	627b      	str	r3, [r7, #36]	@ 0x24
 800336e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003372:	4641      	mov	r1, r8
 8003374:	1854      	adds	r4, r2, r1
 8003376:	4649      	mov	r1, r9
 8003378:	eb43 0501 	adc.w	r5, r3, r1
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	00eb      	lsls	r3, r5, #3
 8003386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800338a:	00e2      	lsls	r2, r4, #3
 800338c:	4614      	mov	r4, r2
 800338e:	461d      	mov	r5, r3
 8003390:	4643      	mov	r3, r8
 8003392:	18e3      	adds	r3, r4, r3
 8003394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003398:	464b      	mov	r3, r9
 800339a:	eb45 0303 	adc.w	r3, r5, r3
 800339e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80033a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80033be:	4629      	mov	r1, r5
 80033c0:	008b      	lsls	r3, r1, #2
 80033c2:	4621      	mov	r1, r4
 80033c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033c8:	4621      	mov	r1, r4
 80033ca:	008a      	lsls	r2, r1, #2
 80033cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80033d0:	f7fc ff02 	bl	80001d8 <__aeabi_uldivmod>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4b60      	ldr	r3, [pc, #384]	@ (800355c <UART_SetConfig+0x4e4>)
 80033da:	fba3 2302 	umull	r2, r3, r3, r2
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	011c      	lsls	r4, r3, #4
 80033e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033e6:	2200      	movs	r2, #0
 80033e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80033f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80033f4:	4642      	mov	r2, r8
 80033f6:	464b      	mov	r3, r9
 80033f8:	1891      	adds	r1, r2, r2
 80033fa:	61b9      	str	r1, [r7, #24]
 80033fc:	415b      	adcs	r3, r3
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003404:	4641      	mov	r1, r8
 8003406:	1851      	adds	r1, r2, r1
 8003408:	6139      	str	r1, [r7, #16]
 800340a:	4649      	mov	r1, r9
 800340c:	414b      	adcs	r3, r1
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800341c:	4659      	mov	r1, fp
 800341e:	00cb      	lsls	r3, r1, #3
 8003420:	4651      	mov	r1, sl
 8003422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003426:	4651      	mov	r1, sl
 8003428:	00ca      	lsls	r2, r1, #3
 800342a:	4610      	mov	r0, r2
 800342c:	4619      	mov	r1, r3
 800342e:	4603      	mov	r3, r0
 8003430:	4642      	mov	r2, r8
 8003432:	189b      	adds	r3, r3, r2
 8003434:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003438:	464b      	mov	r3, r9
 800343a:	460a      	mov	r2, r1
 800343c:	eb42 0303 	adc.w	r3, r2, r3
 8003440:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800344e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800345c:	4649      	mov	r1, r9
 800345e:	008b      	lsls	r3, r1, #2
 8003460:	4641      	mov	r1, r8
 8003462:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003466:	4641      	mov	r1, r8
 8003468:	008a      	lsls	r2, r1, #2
 800346a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800346e:	f7fc feb3 	bl	80001d8 <__aeabi_uldivmod>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4611      	mov	r1, r2
 8003478:	4b38      	ldr	r3, [pc, #224]	@ (800355c <UART_SetConfig+0x4e4>)
 800347a:	fba3 2301 	umull	r2, r3, r3, r1
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	2264      	movs	r2, #100	@ 0x64
 8003482:	fb02 f303 	mul.w	r3, r2, r3
 8003486:	1acb      	subs	r3, r1, r3
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	3332      	adds	r3, #50	@ 0x32
 800348c:	4a33      	ldr	r2, [pc, #204]	@ (800355c <UART_SetConfig+0x4e4>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003498:	441c      	add	r4, r3
 800349a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800349e:	2200      	movs	r2, #0
 80034a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80034a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80034a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80034a8:	4642      	mov	r2, r8
 80034aa:	464b      	mov	r3, r9
 80034ac:	1891      	adds	r1, r2, r2
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	415b      	adcs	r3, r3
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034b8:	4641      	mov	r1, r8
 80034ba:	1851      	adds	r1, r2, r1
 80034bc:	6039      	str	r1, [r7, #0]
 80034be:	4649      	mov	r1, r9
 80034c0:	414b      	adcs	r3, r1
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034d0:	4659      	mov	r1, fp
 80034d2:	00cb      	lsls	r3, r1, #3
 80034d4:	4651      	mov	r1, sl
 80034d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034da:	4651      	mov	r1, sl
 80034dc:	00ca      	lsls	r2, r1, #3
 80034de:	4610      	mov	r0, r2
 80034e0:	4619      	mov	r1, r3
 80034e2:	4603      	mov	r3, r0
 80034e4:	4642      	mov	r2, r8
 80034e6:	189b      	adds	r3, r3, r2
 80034e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034ea:	464b      	mov	r3, r9
 80034ec:	460a      	mov	r2, r1
 80034ee:	eb42 0303 	adc.w	r3, r2, r3
 80034f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80034fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800350c:	4649      	mov	r1, r9
 800350e:	008b      	lsls	r3, r1, #2
 8003510:	4641      	mov	r1, r8
 8003512:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003516:	4641      	mov	r1, r8
 8003518:	008a      	lsls	r2, r1, #2
 800351a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800351e:	f7fc fe5b 	bl	80001d8 <__aeabi_uldivmod>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4b0d      	ldr	r3, [pc, #52]	@ (800355c <UART_SetConfig+0x4e4>)
 8003528:	fba3 1302 	umull	r1, r3, r3, r2
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	2164      	movs	r1, #100	@ 0x64
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	3332      	adds	r3, #50	@ 0x32
 800353a:	4a08      	ldr	r2, [pc, #32]	@ (800355c <UART_SetConfig+0x4e4>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	f003 020f 	and.w	r2, r3, #15
 8003546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4422      	add	r2, r4
 800354e:	609a      	str	r2, [r3, #8]
}
 8003550:	bf00      	nop
 8003552:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003556:	46bd      	mov	sp, r7
 8003558:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355c:	51eb851f 	.word	0x51eb851f

08003560 <memset>:
 8003560:	4402      	add	r2, r0
 8003562:	4603      	mov	r3, r0
 8003564:	4293      	cmp	r3, r2
 8003566:	d100      	bne.n	800356a <memset+0xa>
 8003568:	4770      	bx	lr
 800356a:	f803 1b01 	strb.w	r1, [r3], #1
 800356e:	e7f9      	b.n	8003564 <memset+0x4>

08003570 <__libc_init_array>:
 8003570:	b570      	push	{r4, r5, r6, lr}
 8003572:	4d0d      	ldr	r5, [pc, #52]	@ (80035a8 <__libc_init_array+0x38>)
 8003574:	4c0d      	ldr	r4, [pc, #52]	@ (80035ac <__libc_init_array+0x3c>)
 8003576:	1b64      	subs	r4, r4, r5
 8003578:	10a4      	asrs	r4, r4, #2
 800357a:	2600      	movs	r6, #0
 800357c:	42a6      	cmp	r6, r4
 800357e:	d109      	bne.n	8003594 <__libc_init_array+0x24>
 8003580:	4d0b      	ldr	r5, [pc, #44]	@ (80035b0 <__libc_init_array+0x40>)
 8003582:	4c0c      	ldr	r4, [pc, #48]	@ (80035b4 <__libc_init_array+0x44>)
 8003584:	f000 f818 	bl	80035b8 <_init>
 8003588:	1b64      	subs	r4, r4, r5
 800358a:	10a4      	asrs	r4, r4, #2
 800358c:	2600      	movs	r6, #0
 800358e:	42a6      	cmp	r6, r4
 8003590:	d105      	bne.n	800359e <__libc_init_array+0x2e>
 8003592:	bd70      	pop	{r4, r5, r6, pc}
 8003594:	f855 3b04 	ldr.w	r3, [r5], #4
 8003598:	4798      	blx	r3
 800359a:	3601      	adds	r6, #1
 800359c:	e7ee      	b.n	800357c <__libc_init_array+0xc>
 800359e:	f855 3b04 	ldr.w	r3, [r5], #4
 80035a2:	4798      	blx	r3
 80035a4:	3601      	adds	r6, #1
 80035a6:	e7f2      	b.n	800358e <__libc_init_array+0x1e>
 80035a8:	080035f8 	.word	0x080035f8
 80035ac:	080035f8 	.word	0x080035f8
 80035b0:	080035f8 	.word	0x080035f8
 80035b4:	080035fc 	.word	0x080035fc

080035b8 <_init>:
 80035b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ba:	bf00      	nop
 80035bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035be:	bc08      	pop	{r3}
 80035c0:	469e      	mov	lr, r3
 80035c2:	4770      	bx	lr

080035c4 <_fini>:
 80035c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c6:	bf00      	nop
 80035c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ca:	bc08      	pop	{r3}
 80035cc:	469e      	mov	lr, r3
 80035ce:	4770      	bx	lr
